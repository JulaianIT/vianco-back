<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Seleccionar Cliente, Placa y Conductor</title>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.1/html2canvas.min.js"></script>

    <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link rel="icon" href="/imagenes/logo pestaña.PNG" type="image/x-icon">
    <link rel="shortcut icon" href="/imagenes/logo pestaña.PNG" type="image/x-icon">
           <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.3.1/html2canvas.min.js"></script>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
</head>
 <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f5f5f5;
    }

    header{


        background-color: white;
    }

 #logo {
            position: relative;
            left: 90px;
            width: 400px;
        }
        
        #vigilado {
            float: right;
            width: 300px;
        }

    h1 {
      color: #90c9a7;
      text-align: center;
      margin-top: 30px;
      font-size: 40px;
    }

    form {
      max-width: 50%;
      margin: 0 auto;
      background-color: #fff;
      padding: 30px;
      border-radius: 8px;
            font-size: 40px;

      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    label {
      font-size: 26px;
      color: #333;
    }

    select, button {
      width: 100%;
      padding: 10px;
      margin: 8px 0;
      border-radius: 5px;
      border: 1px solid #ccc;
      background-color: #f9f9f9;
            font-size: 23px;

      transition: border-color 0.3s ease;
    }

    select:focus, button:focus {
      outline: none;
      border-color: #3498db;
    }

    button {
      background-color:#90c9a7;
      color: #fff;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #90c9a7;
    }

    #resultado {
      margin-top: 20px;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      background-color: #fff;
    }
    .FO{

        padding: 16px;
        background-color: white;
        border: 3px solid #d9d9d9;
position: relative;
left: 20%;
align-items: center;
width: 50%;

    }
    *{

  font-family: "Roboto", sans-serif;
 
}


    
  </style>

<body>
        <header>
        <img id="membrete"   src="/imagenes/menbrete.png"/>
        <img  id="logo"      src="/imagenes/logo vianco.png"/>
        <img  id="vigilado"  src="/imagenes/vigilado.png"/>
   
        
       
 




    </header>
    <br>
    <br>
    <div class="FO">
  <h1 id="fu" >GENERAR FUEC</h1>
  <label for="cliente">Selecciona el cliente:</label>
  <select id="cliente"></select>
  <br>
<label for="busquedaPlaca">Buscar Placa:</label>
<input type="text" id="busquedaPlaca" name="busquedaPlaca">
<br>
  <label for="placa">Selecciona la placa del vehículo:</label>
  <select id="placa"></select>
  <br>
  <label for="conductor1">Selecciona el primer conductor:</label>
  <select id="conductor1">    <option value="NA">N/A</option> <!-- Agregar la opción N/A -->
</select>
  <br>
  <label for="conductor2">Selecciona el segundo conductor:</label>
  <select id="conductor2">    <option value="NA">N/A</option> <!-- Agregar la opción N/A -->
</select>
  <br>
  <label for="conductor3">Selecciona el tercer conductor:</label>
  <select id="conductor3">    <option value="NA">N/A</option> <!-- Agregar la opción N/A -->
</select>
  <br>
  <button onclick="buscarInformacion()">GENERAR FUEC</button>
</div>
<br>
<div class="contenido" id="contenido" style="display: inline-block; width: auto; height: auto;">

  <div id="resultado"></div>


</div>

  <button class="volver-btn" id="convertirBtn">DESCARGAR</button>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.0/jspdf.umd.min.js"></script>

<script>
    // Función para obtener las placas de vehículos y llenar el select
    function obtenerPlacas() {
        fetch('/vehiculos_vencidos') // Cambio aquí
            .then(response => response.json())
            .then(vehiculos => {
                const placaSelect = document.getElementById('placa');
                placaSelect.innerHTML = ''; // Limpiar opciones anteriores
                vehiculos.forEach(vehiculo => {
                    const option = document.createElement('option');
                    option.value = vehiculo.placa;
                    option.textContent = vehiculo.placa;
                    placaSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error al obtener los vehículos:', error);
                alert('Error al cargar las placas de vehículos. Por favor, inténtalo de nuevo.');
            });
    }

    // Llamar a la función para obtener las placas al cargar la página
    obtenerPlacas();

    // Manejar la búsqueda de placa
    document.getElementById('busquedaPlaca').addEventListener('input', function() {
        const valorBusqueda = this.value.toLowerCase();
        const opcionesPlaca = document.querySelectorAll('#placa option');
        
        opcionesPlaca.forEach(option => {
            const placa = option.textContent.toLowerCase();
            if (placa.includes(valorBusqueda)) {
                option.style.display = 'block';
            } else {
                option.style.display = 'none';
            }
        });

        // Si solo hay una opción visible, seleccionarla automáticamente
        const opcionesVisibles = Array.from(opcionesPlaca).filter(option => option.style.display !== 'none');
        if (opcionesVisibles.length === 1) {
            document.getElementById('placa').value = opcionesVisibles[0].value;
        }
    });
</script>


<script>
  let clientes = {};

document.addEventListener('DOMContentLoaded', function() {
  fetch('/clientes2') // Cambiar la ruta a /clientes2
    .then(response => response.json())
    .then(clientesData => {
      clientesData.forEach(cliente => {
        clientes[cliente.nombre] = cliente;
      });
      // Llenar el select de clientes
      const clienteSelect = document.getElementById('cliente');
      for (const nombre in clientes) {
        const option = document.createElement('option');
        option.text = nombre;
        clienteSelect.add(option);
      }
    })
    .catch(error => {
      console.error('Error al obtener clientes:', error);
    });
});

function buscarInformacion() {
  const clienteSelect = document.getElementById('cliente');
  const nombreCliente = clienteSelect.options[clienteSelect.selectedIndex].text;
  if (!clientes[nombreCliente]) {
    console.error('No se encontraron datos para el cliente seleccionado.');
    return;
  }
  const contratante = clientes[nombreCliente].contratante;
  console.log('contratante', contratante);
  
   const N_contrato = clientes[nombreCliente].N_contrato;
  console.log('Valor de N_contrato:', N_contrato);

     const fecha_inicio = clientes[nombreCliente].fecha_inicio;
  console.log('fecha_inicio', fecha_inicio);
  
    const fecha_final = clientes[nombreCliente].fecha_final;
  console.log('fecha_final', fecha_final);
  
  const placaSelect = document.getElementById('placa');
  const placa = placaSelect.value;
  const conductorSelect1 = document.getElementById('conductor1');
  const conductor1 = conductorSelect1.value;
  const conductorSelect2 = document.getElementById('conductor2');
  const conductor2 = conductorSelect2.value;
  const conductorSelect3 = document.getElementById('conductor3');
  const conductor3 = conductorSelect3.value;

  fetch(`/fuec/${encodeURIComponent(nombreCliente)}/${placa}/${encodeURIComponent(conductor1)}/${encodeURIComponent(conductor2)}/${encodeURIComponent(conductor3)}/${encodeURIComponent(N_contrato)}/${encodeURIComponent(contratante)}/${encodeURIComponent(fecha_inicio)}/${encodeURIComponent(fecha_final)}`)
    .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.text();
        })
        .then(html => {
            document.getElementById('resultado').innerHTML = html;
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error al buscar información. Por favor, inténtalo de nuevo.');
        });
}

document.addEventListener('DOMContentLoaded', function() {
    // Llenar select de clientes, vehículos y conductores al cargar la página
    Promise.all([
        fetch('/clientes2').then(response => response.json()), // Cambiar la ruta a /clientes2
        fetch('/vehiculoos').then(response => response.json()),
        fetch('/conductoress').then(response => response.json())
    ]).then(([clientes, vehiculos, conductores]) => {
        // Llenar select de clientes
        const clienteSelect = document.getElementById('cliente');
        clientes.forEach(cliente => {
            const option = document.createElement('option');
            option.value = cliente.id;
            option.textContent = cliente.nombre;
            clienteSelect.appendChild(option);
        });

        // Llenar select de conductores
        const conductorSelect1 = document.getElementById('conductor1');
        const conductorSelect2 = document.getElementById('conductor2');
        const conductorSelect3 = document.getElementById('conductor3');
        
        conductores.forEach(conductor => {
            const option1 = document.createElement('option');
            const option2 = document.createElement('option');
            const option3 = document.createElement('option');
            option1.value = conductor.id;
            option2.value = conductor.id;
            option3.value = conductor.id;
            option1.textContent = conductor.conductor;
            option2.textContent = conductor.conductor;
            option3.textContent = conductor.conductor;
            conductorSelect1.appendChild(option1);
            conductorSelect2.appendChild(option2);
            conductorSelect3.appendChild(option3);
        });

        // Agregar la opción N/A en cada select de conductores
        const optionNA = document.createElement('option');
        optionNA.value = "NA";
        optionNA.textContent = "N/A";
        conductorSelect1.appendChild(optionNA.cloneNode(true));
        conductorSelect2.appendChild(optionNA.cloneNode(true));
        conductorSelect3.appendChild(optionNA.cloneNode(true));

        // Llenar select de placas
        const placaSelect = document.getElementById('placa');
        vehiculos.forEach(vehiculo => {
            const option = document.createElement('option');
            option.value = vehiculo.placa;
            option.textContent = vehiculo.placa;
            placaSelect.appendChild(option);
        });
    }).catch(error => {
        console.error('Error al cargar datos:', error);
        alert('Error al cargar datos. Por favor, inténtalo de nuevo.');
    });
});




document.getElementById('convertirBtn').addEventListener('click', function() {
    const container = document.getElementById('FUEC');
    if (container) {
        const options = {
            scale: 4, // Aumenta la escala para mejorar la resolución
            useCORS: true, // Permite cargar imágenes desde otros dominios
            logging: true, // Habilita el registro de eventos en la consola
            windowWidth: container.scrollWidth, // Ajusta el ancho de la ventana
            windowHeight: container.scrollHeight // Ajusta la altura de la ventana
        };

        html2canvas(container, options).then(function(canvas) {
            const imgData = canvas.toDataURL('image/png');
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF('p', 'pt', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();

            const imgWidth = canvas.width;
            const imgHeight = canvas.height;

            const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
            const width = imgWidth * ratio;
            const height = imgHeight * ratio;

            const xOffset = (pdfWidth - width) / 2;
            const yOffset = (pdfHeight - height) / 2;

            pdf.addImage(imgData, 'PNG', xOffset, yOffset, width, height, undefined, 'FAST');
            pdf.save('FUEC_VIANCO.pdf');
        }).catch(function(error) {
            console.error('Error capturing the element:', error);
        });
    } else {
        console.error('Element with ID "FUEC" not found.');
    }
});















    
    document.addEventListener('DOMContentLoaded', function() {
    const placaSelect = document.getElementById('placa');
    const conductorSelect1 = document.getElementById('conductor1');

    // Cuando se seleccione una placa
    placaSelect.addEventListener('change', function() {
        const placa = placaSelect.value;

        // Realizar una solicitud al servidor para obtener el primer conductor asociado a la placa seleccionada
        fetch(`/primer-conductor/${placa}`)
            .then(response => response.json())
            .then(primerConductor => {
                // Limpiar el select del primer conductor
                conductorSelect1.innerHTML = '';

                // Crear una opción para el primer conductor obtenido del servidor
                const option = document.createElement('option');
                option.value = primerConductor.id;
                option.textContent = primerConductor.conductor;
                conductorSelect1.appendChild(option);
            })
            .catch(error => {
                console.error('Error al obtener el primer conductor:', error);
                alert('Error al obtener el primer conductor. Por favor, inténtalo de nuevo.');
            });
    });
});
document.addEventListener('DOMContentLoaded', function() {
    // Obtener todos los conductores disponibles
    fetch('/conductoress')
        .then(response => response.json())
        .then(conductores => {
            const conductorSelect2 = document.getElementById('conductor2');
            const conductorSelect3 = document.getElementById('conductor3');
            conductores.forEach(conductor => {
                // Crear opciones para conductor 2
                const option2 = document.createElement('option');
                option2.value = conductor.id;
                option2.textContent = conductor.conductor;
                conductorSelect2.appendChild(option2);
                // Crear opciones para conductor 3
                const option3 = document.createElement('option');
                option3.value = conductor.id;
                option3.textContent = conductor.conductor;
                conductorSelect3.appendChild(option3);
            });
        })
        .catch(error => {
            console.error('Error al obtener conductores:', error);
            alert('Error al cargar los conductores. Por favor, inténtalo de nuevo.');
        });
});


</script>

<script>


</script>
</body>
</html>