<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="icon" href="/imagenes/logo pestaña.PNG" type="image/x-icon">
    <link rel="shortcut icon" href="/imagenes/logo pestaña.PNG" type="image/x-icon">
</head>
<style>
    * {
        font-family: "Outfit", sans-serif;
        font-optical-sizing: auto;
        font-weight: <weight>;
        font-style: normal;
        padding: 0;
        margin: 0;
        box-sizing: border-box;
    }

    body  {
        background-image: url("/imagenes/Imagen Aeropuerto.png");
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center top 100px;
        width: auto;
        margin: 0;
    }

    table {
        border-collapse: collapse;
        width: 100%;
        margin: 20px 0;
    }

    th, td {
        font-size: 20px;
        border: 6px solid black;
        text-align: center;
        padding: 8px;
        width: auto;
    }

    th {
        text-transform: uppercase;
        border: 6px solid black;
        font-size: 25px;
        color: white;
        background-color: #666567;
    }

    tr:nth-child(even) {
        border: 3px solid black;
        background-color: #d9d9d9;
    }

    tr:nth-child(odd) {
        background-color: #ffffff;
    }

    .tabla-container {
        margin: 30px;
    }

    .BUSCAR {
        background-color: rgba(144, 201, 167);
        padding: 30px;
        text-align: center;
    }

    #fecha {
        width: 300px;
        height: 40px;
        font-size: 18px;
        margin-right: 20px;
    }

    .fehcaa {
        text-transform: uppercase;
        margin-right: 23px;
        font-size: 20px;
        font-weight: bold;
    }

    .volver-btn:hover, .ver:hover {
        background-color: #d9d9d9;
    }

    .volver-btn, .ver {
        position: relative;
        left: 20px;
        text-transform: uppercase;
        background-color: #90c9a7;
        color: #000;
        border: none;
        padding: 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: inline-block;
        margin-top: 20px;
        font-size: 15px;
        font-weight: bold;
        text-decoration: none;
    }

    .titulo-tabla {
        margin: 10px;
        background-color: #d9d9d9;
        padding: 10px;
        text-align: center;
        font-size: 25px;
        font-weight: bold;
        color: black;
        margin-bottom: 10px;
        position: relative;
    }

    .flecha {
        cursor: pointer;
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
    }

    .rotate {
        transform: rotate(180deg);
    }

    footer {
        opacity: 0.6;
        background-color: #222;
        padding: 4.9rem;
        color: #ffff;
        position: relative;
        top: 438px;
        margin: 0;
    }

    footer section {
        float: right;
        margin: 0;
        position: relative;
        top: -60px;
    }

    footer a {
        transition: color 0.3s ease;
        color: #ffff;
        text-decoration: none;
    }

    footer a:hover {
        color: rgb(162, 204, 170);
    }

    footer p {
        position: relative;
        float: left;
        left: -1199px;
        color: #ffff;
        font-size: 20px;
    }

    .bad {
        font-size: 20px;
        position: relative;
        color: rgb(113, 112, 111);
        right: -20px;
        top: 6px;
    }

    .ok {
        font-size: 20px;
        position: relative;
        top: 30px;
    }

    #logo{
        position: relative;
        left: 90px;
        width: 400px;
    }

    #vigilado {
        float: right;
        width: 300px;
    }

    header {
        padding: 2%;
        background-color: white;
    }

    #formFecha {
        opacity: 0.6;
    }

    @media only screen and (max-width: 768px) {
        body  {
            background-image: url("/imagenes/Imagen Aeropuerto (1).png");
            background-repeat: no-repeat;
            background-size: 100% 100vh;
            background-position: center top 32vh;
            width: auto;
            margin: 0;
        }

        table {
            border-collapse: collapse;
            width: 100%;
            margin: 10px 0;
        }

        th, td {
            font-size: 14px;
            border: 1px solid black;
            text-align: center;
            padding: 4px;
        }

        th {
            text-transform: uppercase;
            color: white;
            background-color: #666567;
        }

        tr:nth-child(even) {
            background-color: #d9d9d9;
        }

        tr:nth-child(odd) {
            background-color: #ffffff;
        }

        .tabla-container {
            margin: 10px;
        }

        .BUSCAR {
            background-color: rgba(144, 201, 167);
            padding: 20px;
            text-align: center;
        }

        #fecha {
            width: 300px;
            height: 40px;
            font-size: 18px;
            margin-right: 20px;
        }

        .fehcaa {
            text-transform: uppercase;
            margin-right: 23px;
            font-size: 20px;
            font-weight: bold;
        }

        .volver-btn:hover, .ver:hover {
            background-color: #d9d9d9;
        }

        .volver-btn, .ver {
            position: relative;
            left: 10px;
            text-transform: uppercase;
            background-color: #90c9a7;
            color: #000;
            border: none;
            padding: 3px;
            margin-right: 5px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: inline-block;
            margin-top: 20px;
            font-size: 15px;
            font-weight: bold;
            text-decoration: none;
        }

        header {
            display: none;
        }

        #formFecha {
            opacity: 0.9;
        }
    }
</style>
<body>
<header>
    
</header>

<form id="formFecha" class="BUSCAR">
    <h1>RECEPCIONES AEROPUERTO</h1>
    <br>
    <label class="fehcaa" for="fecha">Selecciona una fecha:</label>
    <input type="date" id="fecha" name="fecha">
    <button type="submit" class="ver">Ver Recepciones</button>
    <a href="/" class="volver-btn"><strong>Volver al Menú</strong></a>
</form>
<hr>
<br>
<br>
<div class="fondo">

<div class="tabla-container">
    <div id="recepcionesContainer">
        <div class="titulo-tabla" id="titulo-nh">Clientes NH <span class="flecha" id="flecha-nh">&#9660;</span></div>
        <table id="tabla-nh">
            <thead>
                <tr>
                     <th>FECHA DE ENVIO</th>
                    <th>Fecha</th>
                    <th>Hora</th>
                    <th>Nombre del Pasajero</th>
                    <th>N° de Vuelo</th>
                    <th>Placa</th>
                    <th>Conductor</th>
                    <th>Celular del Conductor</th>
                </tr>
            </thead>
            <tbody>
                <!-- Contenido de la tabla para clientes NH -->
            </tbody>
        </table>

        <div class="titulo-tabla" id="titulo-otros">Otros Clientes <span class="flecha" id="flecha-otros">&#9660;</span></div>
        <table id="tabla-otros">
            <thead>
                <tr>
                    <th>FECHA DE ENVIO</th>
                    <th>Cliente</th>
                    <th>Fecha</th>
                    <th>Hora</th>
                    <th>Nombre del Pasajero</th>
                    <th>N° de Vuelo</th>
                    <th>Placa</th>
                    <th>Conductor</th>
                    <th>Celular del Conductor</th>
                </tr>
            </thead>
            <tbody>
                <!-- Contenido de la tabla para otros clientes -->
            </tbody>
        </table>
    </div>
</div>

<br>
<br>
</div>

</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
$(document).ready(function() {
    // Función para manejar el envío del formulario de búsqueda
    $('#formFecha').submit(function(event) {
        event.preventDefault();
        const fecha = $('#fecha').val();
        $.ajax({
            type: 'POST',
            url: '/buscar_por_fecha',
            data: { fecha: fecha },
            success: function(response) {
                mostrarRecepciones(response);
            },
            error: function(error) {
                console.error('Error en la solicitud AJAX:', error);
            }
        });
    });

// Función para mostrar las recepciones en las tablas
function mostrarRecepciones(recepciones) {
    const recepcionesContainer = $('#recepcionesContainer');
    recepcionesContainer.empty(); // Limpiar el contenedor

    // Función para crear una única tabla de recepciones
    function crearTablaRecepciones(recepciones, cliente) {
        // Convertir la hora en formato militar a minutos desde la medianoche
        recepciones.forEach(recepcion => {
            const [hora, minutos, segundos] = recepcion.hora.split(':').map(Number);
            recepcion.horaNumerica = hora * 60 + minutos + segundos / 60;
        });

        // Ordenar las recepciones por hora numérica de forma ascendente
        recepciones.sort((a, b) => a.horaNumerica - b.horaNumerica);

        // Determinar el título completo para la tabla
        let tituloCompleto = cliente;
        if (cliente.includes('NH')) {
            // Extraer el nombre completo del cliente NH
            const match = cliente.match(/H\d+\.\s(.+)/);
            if (match) {
                tituloCompleto = match[1]; // Usar el nombre completo del cliente NH
            }
        }

        // Reemplazar espacios en blanco en el nombre del cliente por guiones y convertir a minúsculas
        const clienteId = cliente.replace(/\s+/g, '-').toLowerCase();

        // Crear la tabla HTML
        const tablaHTML = `
            <div class="titulo-tabla">${tituloCompleto} <span class="flecha">&#9660;</span></div>
            <table style="display: none;">
                <thead>
                    <tr>
                        <th>FECHA DE ENVIO</th>
                        <th>Cliente</th>
                        <th>Fecha</th>
                        <th>Hora</th>
                        <th>Nombre del Pasajero</th>
                        <th>N° de Vuelo</th>
                        <th>Placa</th>
                        <th>Conductor</th>
                        <th>Celular del Conductor</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    ${recepciones.map(recepcion => `
                        <tr>
                            <td><span class="static-data">${formatDateTime(recepcion.fecha_de_subida)}</span></td>
                            <td><span class="static-data">${recepcion.cliente}</span><input type="text" class="form-control editable-data edit-cliente" style="display: none;" value="${recepcion.cliente}"></td>
                            <td><span class="static-data">${new Date(recepcion.fecha).toLocaleDateString()}</span></td>
                            <td><span class="static-data">${recepcion.hora}</span><input type="text" class="form-control editable-data edit-hora" style="display: none;" value="${recepcion.hora}"></td>
                            <td><span class="static-data">${recepcion.nombre_pasajero}</span><input type="text" class="form-control editable-data edit-nombre-pasajero" style="display: none;" value="${recepcion.nombre_pasajero}"></td>
                            <td><span class="static-data">${recepcion.vuelo}</span><input type="text" class="form-control editable-data edit-vuelo" style="display: none;" value="${recepcion.vuelo}"></td>
                            <td><span class="static-data">${recepcion.placa}</span><input type="text" class="form-control editable-data edit-placa" style="display: none;" value="${recepcion.placa}"></td>
                            <td><span class="static-data">${recepcion.conductor}</span><input type="text" class="form-control editable-data edit-conductor" style="display: none;" value="${recepcion.conductor}"></td>
                            <td><span class="static-data">${recepcion.celular_conductor}</span><input type="text" class="form-control editable-data edit-celular-conductor" style="display: none;" value="${recepcion.celular_conductor}"></td>
                            <td>
                                {{#if callcenter}}
                                    <button class="editar-btn" data-id="${recepcion.id}">Editar</button>
                                    <button class="guardar-btn" data-id="${recepcion.id}" style="display: none;">Guardar</button>
                                {{/if}}
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;

        return tablaHTML;
    }

    // Organizar las recepciones por cliente
    const clientesNH = {}; // Objeto para almacenar las recepciones de clientes NH
    const todosClientesNH = []; // Arreglo para todas las recepciones de clientes NH
    const otrosClientes = {}; // Objeto para almacenar las recepciones de otros clientes

    // Iterar sobre todas las recepciones
    recepciones.forEach(recepcion => {
        // Verificar si el cliente contiene 'NH'
        if (recepcion.cliente.includes('NH')) {
            // Extraer el nombre completo del cliente NH
            const match = recepcion.cliente.match(/H\d+\.\s(.+)/);
            const clienteNHKey = match ? match[0] : recepcion.cliente; // Usar el nombre completo o el cliente completo si no hay coincidencia

            // Verificar si ya existe la clave para ese cliente NH, si no, crearla
            if (!clientesNH[clienteNHKey]) {
                clientesNH[clienteNHKey] = []; // Inicializar el arreglo para ese cliente NH
            }

            // Agregar la recepción al arreglo correspondiente del cliente NH
            clientesNH[clienteNHKey].push(recepcion);
            // También agregar la recepción al arreglo de todos los clientes NH
            todosClientesNH.push(recepcion);
        } else {
            // Si no es un cliente NH, agregar la recepción al objeto de otros clientes
            if (!otrosClientes[recepcion.cliente]) {
                otrosClientes[recepcion.cliente] = [];
            }
            otrosClientes[recepcion.cliente].push(recepcion);
        }
    });

    // Mostrar la tabla para todos los clientes NH juntos
    if (todosClientesNH.length > 0) {
        const tablaTodosClientesNH = crearTablaRecepciones(todosClientesNH, 'Todos los Clientes NH');
        recepcionesContainer.append(tablaTodosClientesNH);
    }

    // Mostrar las tablas para los clientes NH individuales
    Object.keys(clientesNH).forEach(clienteNH => {
        const tablaClientesNH = crearTablaRecepciones(clientesNH[clienteNH], clienteNH);
        recepcionesContainer.append(tablaClientesNH);
    });

    // Mostrar las tablas para los otros clientes
    Object.keys(otrosClientes).forEach(cliente => {
        const tablaCliente = crearTablaRecepciones(otrosClientes[cliente], cliente);
        recepcionesContainer.append(tablaCliente);
    });

    // Asignar eventos de clic a las flechas para mostrar/ocultar tablas
    $('.flecha').click(function() {
        $(this).toggleClass('rotate'); // Rotar la flecha
        $(this).parent().next('table').toggle(); // Mostrar u ocultar la tabla siguiente
    });



        // Asignar eventos de clic a los botones de edición
        $('.editar-btn').click(function(event) {
            event.preventDefault();
            const fila = $(this).closest('tr');

            // Mostrar campos editables y ocultar datos estáticos
            fila.find('td .static-data').hide();
            fila.find('td .editable-data').show();

            // Mostrar botón "Guardar" y ocultar botón "Editar"
            fila.find('.editar-btn').hide();
            fila.find('.guardar-btn').show();
        });

        // Escucha el clic en el botón "Guardar"
        $('#recepcionesContainer').on('click', '.guardar-btn', function(event) {
            event.preventDefault();
            const fila = $(this).closest('tr');
            const datosEditados = {
                id: fila.find('.guardar-btn').data('id'), // Obtener el ID del botón "Guardar"
                cliente: fila.find('.edit-cliente').val(),
                hora: fila.find('.edit-hora').val(),
                nombre_pasajero: fila.find('.edit-nombre-pasajero').val(),
                vuelo: fila.find('.edit-vuelo').val(),
                placa: fila.find('.edit-placa').val(),
                conductor: fila.find('.edit-conductor').val(),
                celular_conductor: fila.find('.edit-celular-conductor').val()
            };

            // Envía los datos editados al servidor
            $.ajax({
                type: 'POST',
                url: '/guardar_edicionAE',
                data: datosEditados,
                success: function(response) {
                    // Recarga la página para ver los cambios
                    location.reload();
                },
                error: function(xhr, status, error) {
                    console.error('Error en la solicitud AJAX:', status, error);
                    alert('Error en la solicitud AJAX. Consulta la consola para más detalles.');
                }
            });

            // Mostrar botón "Editar" y ocultar botón "Guardar" después de guardar
            fila.find('.editar-btn').show();
            fila.find('.guardar-btn').hide();
        });
    }

    // Función para formatear la fecha en el formato adecuado (YYYY-MM-DD HH:MM:SS)
    function formatDate(dateString) {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }

    // Función para formatear la fecha y hora
    function formatDateTime(dateTime) {
        const date = new Date(dateTime);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${day}-${month}-${year} ${hours}:${minutes}`;
    }
});

</script>


</body>
</html>
